Enabling Cross Origin Requests for a RESTful Web Service

You can enable cross-origin resource sharing (CORS) from either in individual controllers or globally. 

1.Controller Method CORS Configuration

2.Global CORS configuration

Controller Method CORS Configuration
So that the RESTful web service will include CORS access control headers in its response, 
you have to add a @CrossOrigin annotation to the handler method,



2.Spring CORS – Global CORS configuration
2.1. Implement WebMvcConfigurer
To enable CORS for the whole application, use WebMvcConfigurer to add CorsRegistry

    package com.myapp.springboot.configs;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.web.servlet.config.annotation.CorsRegistry;
    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
    
    @Configuration
    public class WebMvcConfiguration implements WebMvcConfigurer {
        @Override
       public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/*").//mappings
        allowedOrigins("*").//"http://domain2.com"
        allowedMethods("*").//put,post,get
        allowedHeaders("*").//("Content-Type", "Accept")
        allowCredentials(false);
        }
    }
2.2. WebMvcConfigurer Bean
In spring boot application, it is recommended to just declare a WebMvcConfigurer bean.

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class CorsConfiguration 
{
    @Bean
    public WebMvcConfigurer corsConfigurer() 
    {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("http://localhost:4200");
            }
        };
    }
}